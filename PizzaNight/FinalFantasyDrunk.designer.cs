#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PizzaNight
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pizzani1_FinalFantasyDrunk")]
	public partial class FinalFantasyDrunkDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDrink(Drink instance);
    partial void UpdateDrink(Drink instance);
    partial void DeleteDrink(Drink instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertSessionDrink(SessionDrink instance);
    partial void UpdateSessionDrink(SessionDrink instance);
    partial void DeleteSessionDrink(SessionDrink instance);
    partial void InsertSessionPlayer(SessionPlayer instance);
    partial void UpdateSessionPlayer(SessionPlayer instance);
    partial void DeleteSessionPlayer(SessionPlayer instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertGameType(GameType instance);
    partial void UpdateGameType(GameType instance);
    partial void DeleteGameType(GameType instance);
    #endregion
		
		public FinalFantasyDrunkDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["pizzani1_FinalFantasyDrunkConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FinalFantasyDrunkDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalFantasyDrunkDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalFantasyDrunkDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FinalFantasyDrunkDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Drink> Drinks
		{
			get
			{
				return this.GetTable<Drink>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<SessionDrink> SessionDrinks
		{
			get
			{
				return this.GetTable<SessionDrink>();
			}
		}
		
		public System.Data.Linq.Table<SessionPlayer> SessionPlayers
		{
			get
			{
				return this.GetTable<SessionPlayer>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<GameType> GameTypes
		{
			get
			{
				return this.GetTable<GameType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pizzani1_ffd.Drinks")]
	public partial class Drink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _DrinkRule;
		
		private string _Penalty;
		
		private System.DateTime _DateAdded;
		
		private int _GameTypeID;
		
		private EntitySet<SessionDrink> _SessionDrinks;
		
		private EntityRef<GameType> _GameType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDrinkRuleChanging(string value);
    partial void OnDrinkRuleChanged();
    partial void OnPenaltyChanging(string value);
    partial void OnPenaltyChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnGameTypeIDChanging(int value);
    partial void OnGameTypeIDChanged();
    #endregion
		
		public Drink()
		{
			this._SessionDrinks = new EntitySet<SessionDrink>(new Action<SessionDrink>(this.attach_SessionDrinks), new Action<SessionDrink>(this.detach_SessionDrinks));
			this._GameType = default(EntityRef<GameType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkRule", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string DrinkRule
		{
			get
			{
				return this._DrinkRule;
			}
			set
			{
				if ((this._DrinkRule != value))
				{
					this.OnDrinkRuleChanging(value);
					this.SendPropertyChanging();
					this._DrinkRule = value;
					this.SendPropertyChanged("DrinkRule");
					this.OnDrinkRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Penalty", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Penalty
		{
			get
			{
				return this._Penalty;
			}
			set
			{
				if ((this._Penalty != value))
				{
					this.OnPenaltyChanging(value);
					this.SendPropertyChanging();
					this._Penalty = value;
					this.SendPropertyChanged("Penalty");
					this.OnPenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameTypeID", DbType="Int NOT NULL")]
		public int GameTypeID
		{
			get
			{
				return this._GameTypeID;
			}
			set
			{
				if ((this._GameTypeID != value))
				{
					if (this._GameType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GameTypeID = value;
					this.SendPropertyChanged("GameTypeID");
					this.OnGameTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_SessionDrink", Storage="_SessionDrinks", ThisKey="ID", OtherKey="DrinkID")]
		public EntitySet<SessionDrink> SessionDrinks
		{
			get
			{
				return this._SessionDrinks;
			}
			set
			{
				this._SessionDrinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameType_Drink", Storage="_GameType", ThisKey="GameTypeID", OtherKey="ID", IsForeignKey=true)]
		public GameType GameType
		{
			get
			{
				return this._GameType.Entity;
			}
			set
			{
				GameType previousValue = this._GameType.Entity;
				if (((previousValue != value) 
							|| (this._GameType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameType.Entity = null;
						previousValue.Drinks.Remove(this);
					}
					this._GameType.Entity = value;
					if ((value != null))
					{
						value.Drinks.Add(this);
						this._GameTypeID = value.ID;
					}
					else
					{
						this._GameTypeID = default(int);
					}
					this.SendPropertyChanged("GameType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionDrinks(SessionDrink entity)
		{
			this.SendPropertyChanging();
			entity.Drink = this;
		}
		
		private void detach_SessionDrinks(SessionDrink entity)
		{
			this.SendPropertyChanging();
			entity.Drink = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pizzani1_ffd.Sessions")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GameID;
		
		private System.DateTime _DateStarted;
		
		private System.Nullable<System.DateTime> _DateEnded;
		
		private string _Comments;
		
		private EntitySet<SessionDrink> _SessionDrinks;
		
		private EntitySet<SessionPlayer> _SessionPlayers;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnDateStartedChanging(System.DateTime value);
    partial void OnDateStartedChanged();
    partial void OnDateEndedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndedChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Session()
		{
			this._SessionDrinks = new EntitySet<SessionDrink>(new Action<SessionDrink>(this.attach_SessionDrinks), new Action<SessionDrink>(this.detach_SessionDrinks));
			this._SessionPlayers = new EntitySet<SessionPlayer>(new Action<SessionPlayer>(this.attach_SessionPlayers), new Action<SessionPlayer>(this.detach_SessionPlayers));
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStarted", DbType="DateTime NOT NULL")]
		public System.DateTime DateStarted
		{
			get
			{
				return this._DateStarted;
			}
			set
			{
				if ((this._DateStarted != value))
				{
					this.OnDateStartedChanging(value);
					this.SendPropertyChanging();
					this._DateStarted = value;
					this.SendPropertyChanged("DateStarted");
					this.OnDateStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnded
		{
			get
			{
				return this._DateEnded;
			}
			set
			{
				if ((this._DateEnded != value))
				{
					this.OnDateEndedChanging(value);
					this.SendPropertyChanging();
					this._DateEnded = value;
					this.SendPropertyChanged("DateEnded");
					this.OnDateEndedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(2000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionDrink", Storage="_SessionDrinks", ThisKey="ID", OtherKey="SessionID")]
		public EntitySet<SessionDrink> SessionDrinks
		{
			get
			{
				return this._SessionDrinks;
			}
			set
			{
				this._SessionDrinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionPlayer", Storage="_SessionPlayers", ThisKey="ID", OtherKey="SessionID")]
		public EntitySet<SessionPlayer> SessionPlayers
		{
			get
			{
				return this._SessionPlayers;
			}
			set
			{
				this._SessionPlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Session", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionDrinks(SessionDrink entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionDrinks(SessionDrink entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_SessionPlayers(SessionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_SessionPlayers(SessionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pizzani1_ffd.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<SessionPlayer> _SessionPlayers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Player()
		{
			this._SessionPlayers = new EntitySet<SessionPlayer>(new Action<SessionPlayer>(this.attach_SessionPlayers), new Action<SessionPlayer>(this.detach_SessionPlayers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_SessionPlayer", Storage="_SessionPlayers", ThisKey="ID", OtherKey="PlayerID")]
		public EntitySet<SessionPlayer> SessionPlayers
		{
			get
			{
				return this._SessionPlayers;
			}
			set
			{
				this._SessionPlayers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionPlayers(SessionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_SessionPlayers(SessionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pizzani1_ffd.SessionDrinks")]
	public partial class SessionDrink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SessionID;
		
		private int _DrinkID;
		
		private EntityRef<Drink> _Drink;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnDrinkIDChanging(int value);
    partial void OnDrinkIDChanged();
    #endregion
		
		public SessionDrink()
		{
			this._Drink = default(EntityRef<Drink>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int NOT NULL")]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkID", DbType="Int NOT NULL")]
		public int DrinkID
		{
			get
			{
				return this._DrinkID;
			}
			set
			{
				if ((this._DrinkID != value))
				{
					if (this._Drink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrinkIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkID = value;
					this.SendPropertyChanged("DrinkID");
					this.OnDrinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_SessionDrink", Storage="_Drink", ThisKey="DrinkID", OtherKey="ID", IsForeignKey=true)]
		public Drink Drink
		{
			get
			{
				return this._Drink.Entity;
			}
			set
			{
				Drink previousValue = this._Drink.Entity;
				if (((previousValue != value) 
							|| (this._Drink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drink.Entity = null;
						previousValue.SessionDrinks.Remove(this);
					}
					this._Drink.Entity = value;
					if ((value != null))
					{
						value.SessionDrinks.Add(this);
						this._DrinkID = value.ID;
					}
					else
					{
						this._DrinkID = default(int);
					}
					this.SendPropertyChanged("Drink");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionDrink", Storage="_Session", ThisKey="SessionID", OtherKey="ID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionDrinks.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionDrinks.Add(this);
						this._SessionID = value.ID;
					}
					else
					{
						this._SessionID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pizzani1_ffd.SessionPlayers")]
	public partial class SessionPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PlayerID;
		
		private int _SessionID;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    #endregion
		
		public SessionPlayer()
		{
			this._Player = default(EntityRef<Player>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int NOT NULL")]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_SessionPlayer", Storage="_Player", ThisKey="PlayerID", OtherKey="ID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.SessionPlayers.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.SessionPlayers.Add(this);
						this._PlayerID = value.ID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_SessionPlayer", Storage="_Session", ThisKey="SessionID", OtherKey="ID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.SessionPlayers.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.SessionPlayers.Add(this);
						this._SessionID = value.ID;
					}
					else
					{
						this._SessionID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pizzani1_ffd.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DateStarted;
		
		private System.Nullable<System.DateTime> _DateEnded;
		
		private string _CharacterName;
		
		private int _GameTypeID;
		
		private System.Nullable<System.DateTime> _LastPlayed;
		
		private EntitySet<Session> _Sessions;
		
		private EntityRef<GameType> _GameType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateStartedChanging(System.DateTime value);
    partial void OnDateStartedChanged();
    partial void OnDateEndedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndedChanged();
    partial void OnCharacterNameChanging(string value);
    partial void OnCharacterNameChanged();
    partial void OnGameTypeIDChanging(int value);
    partial void OnGameTypeIDChanged();
    partial void OnLastPlayedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPlayedChanged();
    #endregion
		
		public Game()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._GameType = default(EntityRef<GameType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStarted", DbType="DateTime NOT NULL")]
		public System.DateTime DateStarted
		{
			get
			{
				return this._DateStarted;
			}
			set
			{
				if ((this._DateStarted != value))
				{
					this.OnDateStartedChanging(value);
					this.SendPropertyChanging();
					this._DateStarted = value;
					this.SendPropertyChanged("DateStarted");
					this.OnDateStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnded
		{
			get
			{
				return this._DateEnded;
			}
			set
			{
				if ((this._DateEnded != value))
				{
					this.OnDateEndedChanging(value);
					this.SendPropertyChanging();
					this._DateEnded = value;
					this.SendPropertyChanged("DateEnded");
					this.OnDateEndedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CharacterName
		{
			get
			{
				return this._CharacterName;
			}
			set
			{
				if ((this._CharacterName != value))
				{
					this.OnCharacterNameChanging(value);
					this.SendPropertyChanging();
					this._CharacterName = value;
					this.SendPropertyChanged("CharacterName");
					this.OnCharacterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameTypeID", DbType="Int NOT NULL")]
		public int GameTypeID
		{
			get
			{
				return this._GameTypeID;
			}
			set
			{
				if ((this._GameTypeID != value))
				{
					if (this._GameType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GameTypeID = value;
					this.SendPropertyChanged("GameTypeID");
					this.OnGameTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPlayed", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPlayed
		{
			get
			{
				return this._LastPlayed;
			}
			set
			{
				if ((this._LastPlayed != value))
				{
					this.OnLastPlayedChanging(value);
					this.SendPropertyChanging();
					this._LastPlayed = value;
					this.SendPropertyChanged("LastPlayed");
					this.OnLastPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Session", Storage="_Sessions", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameType_Game", Storage="_GameType", ThisKey="GameTypeID", OtherKey="ID", IsForeignKey=true)]
		public GameType GameType
		{
			get
			{
				return this._GameType.Entity;
			}
			set
			{
				GameType previousValue = this._GameType.Entity;
				if (((previousValue != value) 
							|| (this._GameType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameType.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._GameType.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._GameTypeID = value.ID;
					}
					else
					{
						this._GameTypeID = default(int);
					}
					this.SendPropertyChanged("GameType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pizzani1_ffd.GameTypes")]
	public partial class GameType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Drink> _Drinks;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public GameType()
		{
			this._Drinks = new EntitySet<Drink>(new Action<Drink>(this.attach_Drinks), new Action<Drink>(this.detach_Drinks));
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameType_Drink", Storage="_Drinks", ThisKey="ID", OtherKey="GameTypeID")]
		public EntitySet<Drink> Drinks
		{
			get
			{
				return this._Drinks;
			}
			set
			{
				this._Drinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameType_Game", Storage="_Games", ThisKey="ID", OtherKey="GameTypeID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.GameType = this;
		}
		
		private void detach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.GameType = null;
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameType = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameType = null;
		}
	}
}
#pragma warning restore 1591
